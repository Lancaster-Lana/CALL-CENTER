@model Laneta.Web.ViewModels.ScheduleViewModel
<!-- Include the plugin's CSS and JS: -->

<link rel='stylesheet' type='text/css' href="@Url.Content("~/Content/fullcalendar.css")" />
<link rel='stylesheet' type='text/css' href="@Url.Content("~/Content/fullcalendar.print.css")" media='print' />
<link rel="stylesheet" href="@Url.Content("~/lib/bootstrap/dist/css/bootstrap.css")" />

@{
    ViewBag.Title = "Schedule";
}
<h2>Schedule for @Model.Employee?.FullName</h2>

<form action="/ServiceTickets/Reschedule" method="post">
    <div id='calendar1' class='calendar'></div>

    <input type="hidden" id="employeeId" name="employeeId" value="@Model.Employee?.ID" />
    <input type="hidden" id="serviceTicketId" name="serviceTicketId" value="@Model.ServiceTicket?.ID" />

    <input type="hidden" id="startDT" name="startDT" value="@ViewBag.StartTime" />
    <input type="hidden" id="endDT" name="endDT" value="@ViewBag.endTime" />
    <div class="nav-navbar">
        <a href="Index" class="btn btn-default">Cancel</a>
        <button id="confirmSchedule" name="confirmSchedule"  value="Confirm" class="btn btn-success" />
    </div>
</form>

<script type='text/javascript' src="@Url.Content("~/Scripts/moment.js")"></script>
<script type='text/javascript' src="@Url.Content("~/Scripts/fullcalendar.min.js")"></script>

<script type="text/javascript">
    $(function () {

      //closure to init calendar once
      (function () {
        //Scheduler for the employee
          var employeeId = $("#employeeId").val();

        var calendar = $('#calendar1').fullCalendar({
            schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives', //only for development
            defaultView: 'agendaWeek',
            header: {
                left: 'today,prev,next',
                center: 'title',
                right: 'agendaDay,agendaWeek,month'
            },
            firstHour: 8,
            minTime: 8,
            maxTime: 23,
            allDaySlot: true,
            droppable: true,
            contentHeight: 500,
            height: 500,
            editable: true,
            events: getEventsForEmployee(employeeId),
            // called when an event (already on the calendar) is moved
            eventDrop: function (event) {
                var startDate = event.start != null
                    ? moment(event.start).format('YYYY-MM-DD HH:mm A') // $.fullCalendar.formatDate(event.start, 'YYYY-MM-DD HH:mm')
                    : null;
                var endDate = event.end != null
                    ? moment(event.end).format('YYYY-MM-DD HH:mm A')
                    : null;
                //Update event details : start\end date
                var idEvent = @Model.ServiceTicket.ID;
                if (idEvent == event.idEvent) {
                    $('#startDT').val(startDate);
                    $('#endDT').val(endDate);
                    console.log('eventDrop ', event.idEvent);
                }
            },
            eventResize: function (event) {
                var startDate = moment(event.start).format('YYYY-MM-DD HH:mm A');
                var endDate = moment(event.end).format('YYYY-MM-DD HH:mm A');
                //Update event details : start\end date
                var idEvent = @Model.ServiceTicket.ID;
                if (idEvent == event.idEvent)
                {
                    $('#startDT').val(startDate);
                    $('#endDT').val(endDate);
                    console.log('eventResize ', event.idEvent);
                }
            },
            //a new external event is dropped to calendar
            eventReceive: function (event)
            {
                var eventName = event.title;
                var startDate = event.start.toISOString(); //.new Date( start.toLocaleDateString("en-US", options))/ event.start.toJSON(); //Date.parse
                var endDate = startDate;
            },

            eventClick: function (event)
            {
                var startDate = event.start != null
                    ? moment(event.start).format('YYYY-MM-DD HH:mm A') //:ss.SSSZ $.fullCalendar.formatDate(event.start, 'YYYY-MM-DD HH:mm')
                    : null;
                var endDate = event.end != null
                    ? $.fullCalendar.formatDate(event.end, 'YYYY-MM-DD HH:mm')
                    : null;
            },

            success: function () {
 
            }
        });

        //Attach handler to 'Confirm' re-scheduling tickets
        $('#confirmSchedule').click(function () {
            var idEvent = @Model.ServiceTicket.ID;
            //TODO: Find tickets for that worker (after adding to the calendar)
            var clientTickets = $("#calendar1").fullCalendar('clientEvents');//calendar.getEventById(idEvent);
            var tasksArr = [];

            //get resheduled tickets
            $(clientTickets).each(function (i, eventoObj)
            {
                var event = {
                    serviceTicketID: idEvent,
                    employeeId: employeeId, //assignedTo
                    start: eventoObj._start,
                    end: eventoObj._end,//workHours :end - start
                    assignedOn: new Date() //TODO:
                     
                    //allDay: eventoObj._allDay,
                    //title: eventoObj.title,
                    //description: eventoObj.title,
                    //closed: eventoObj._end
                };
                tasksArr.push(event);
            });

            //update in DB !!!
            var resheduleUrl = "/ServiceTickets/Reschedule/" + employeeId;
            $.ajax({
                url: resheduleUrl,
                type: 'put', //headers: { "X-HTTP-Method-Override": "PUT" },
                contentType: "application/json", //dataType: "json",
                data: JSON.stringify(tasksArr), //JSON.stringify({ "tasks": ticketsItemsArr });     
                //headers: {
                //    'x-auth-token': localStorage.accessToken,
                //    "Content-Type": "application/json"
                //},
                
                error: function (msg)
                {
                    alert(msg);
                }
            });
        });
       
     })();
 });

    function getEventsForEmployee(id)
    {
        var date = new Date();
        var d = date.getDate();
        var m = date.getMonth();
        var y = date.getFullYear();

        var events = [];

        @foreach (var item in Model.ScheduleItems.OrderBy(i => i.Start)){
            @Html.Raw(string.Format("events.push({{ title: '[{0}] {1}', start: new Date(y, m, d, {2}, {3}), end: new Date(y, m, d, {4}, {5}), allDay: false }});", string.Format("A0141{0:d2}", item.ServiceTicket.ID), item.ServiceTicket.Title, item.Start.Hour, item.Start.Minute, (item.Start.AddHours(item.WorkHours)).Hour, (item.Start.AddHours(item.WorkHours)).Minute));
        }

        var startTime = $("#startDT").val();
        var startTimeHour = 10; //parseInt(startTime, 10); //default
        var startTimeMinute = (startTime % 1 == 0) ? 0 : 30;

        var idEvent = @Model.ServiceTicket.ID;

        var currentEvent = {
            idEvent: idEvent,
            title: '@string.Format("[A0141{0:d2}] {1}", Model.ServiceTicket.ID, Model.ServiceTicket.Title)',
            start: new Date(y, m, d, startTimeHour, startTimeMinute),
            end: new Date(y, m, d, startTimeHour + 1, startTimeMinute),
            allDay: false,
            backgroundColor: 'red'
        }
        events.push(currentEvent);

        return events;
    }

</script>
